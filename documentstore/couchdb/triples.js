{
    "_id": "_design\/triples",
    "_rev": "63-b2689002fc3701626d961dc83147b434",
    "views": {
        "spo": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'spo';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "pso": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'pso';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "pos": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'pos';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "osp": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'osp';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "ops": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'ops';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "sop": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'sop';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        }
    },
    "language": "javascript"
}