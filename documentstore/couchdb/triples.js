{
    "_id": "_design\/triples",
    "_rev": "101-c73c7a7c70627d6eb5e9a9d6fe56d3fa",
    "views": {
        "spo": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction detect_language(s) {\n    var language = null;\n    var matched = 0;\n    var parts = [];\n\n    var regexp = [];\n\n    \/\/ https:\/\/gist.github.com\/ryanmcgrath\/982242\n    regexp['ja'] = \/[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B\/g;\n    \/\/ http:\/\/hjzhao.blogspot.co.uk\/2015\/09\/javascript-detect-chinese-character.html\n    regexp['zh'] = \/[\\u4E00-\\uFA29]\/g;\n    \/\/ http:\/\/stackoverflow.com\/questions\/32709687\/js-check-if-string-contains-only-cyrillic-symbols-and-spaces\n    regexp['ru'] = \/[\\u0400-\\u04FF]\/g;\n\n    for (var i in regexp) {\n        parts = s.match(regexp[i]);\n\n        if (parts != null) {\n            if (parts.length > matched) {\n                language = i;\n                matched = parts.length;\n            }\n        }\n    }\n\n    \/\/ require a minimum matching\n    if (matched < 2) {\n        language = null;\n    }\n\n    return language;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    \n    subject = subject.replace(\/<\/g, '%3C');\n    subject = subject.replace(\/>\/g, '%3E');\n    \n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n    \n    \tobject = object.replace(\/<\/g, '%3C');\n    \tobject = object.replace(\/>\/g, '%3E');    \n    \n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal                    \n                    switch (i) {\n                    \n                    \tcase '@type':\n                    \t\ttriples.push(\n                    \t\t\ttriple(subject, \n                    \t\t\t'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', \n                    \t\t\tproperty_to_uri(context, root[i][j]))\n                    \t\t);\n                    \t\tbreak;\n                    \n                    \tdefault:\n                    \t    triples.push(\n\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t'\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t); \n                    \t\tbreak;                   \n                    }\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \tbnode_count = 0;\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'spo';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction message(doc) {\n\n\tvar use_roles = true;\n\tvar use_citations = true;\n\n\tvar jsonld = {};\n\n\t\/\/ context\n\tjsonld['@context'] = 'http:\/\/schema.org\/';\n\n\tvar container = null;\n\n\t\/\/ identifier\n\tif (doc.message.DOI) {\n\t\tjsonld['@id'] = 'https:\/\/doi.org\/' + doc.message.DOI.toLowerCase();\n\t}\n\n\tfor (var i in doc.message) {\n\n\t\tswitch (i) {\n\n\t\t\tcase 'type':\n\t\t\t\tswitch (doc.message[i]) {\n\t\t\t\t\tcase 'article-journal':\n\t\t\t\t\tcase 'journal-article':\n\t\t\t\t\t\tjsonld['@type'] = 'ScholarlyArticle';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 'DOI':\n\t\t\t\tvar identifier = {};\n\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\tidentifier.value = doc.message[i].toLowerCase();\n\t\t\t\t\n\t\t\t\tif (!jsonld.identifier) {\n\t\t\t\t\tjsonld.identifier = [];\n\t\t\t\t}\n\t\t\t\tjsonld.identifier.push(identifier);\n\t\t\t\tbreak;\t\n\n\t\t\tcase 'volume':\n\t\t\t\tjsonld.volumeNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'issue':\n\t\t\t\tjsonld.issueNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'URL':\n\t\t\t\tjsonld.url = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'page':\n\t\t\tcase 'pages':\n\t\t\t\tvar parts = doc.message[i].match(\/^(.*)\\-(.*)$\/);\n\t\t\t\tif (parts) {\n\t\t\t\t\tjsonld.pageStart = parts[1];\n\t\t\t\t\tjsonld.pageEnd = parts[2];\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.pagination = doc.message[i];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'issued':\n\t\t\t\tvar date = '';\n\t\t\t\tvar dateparts = doc.message[i]['date-parts'][0];\n\n\t\t\t\tswitch (dateparts.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tdate = dateparts[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-00';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-' + (\"00\" + dateparts[2]).slice(-2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tjsonld.datePublished = date.toString();\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ tags\n\t\t\tcase 'subject':\n\t\t\t\tjsonld.keywords = [];\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tjsonld.keywords.push(doc.message[i][j]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'ISSN':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\tif (!container.issn) {\n\t\t\t\t\tcontainer.issn = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tcontainer.issn.push(doc.message[i][j]);\n\t\t\t\t}\n\n\t\t\t\tcontainer['@id'] = 'http:\/\/worldcat.org\/issn\/' + container.issn[0];\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ journal\t\t\t\n\t\t\tcase 'container-title':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\t\/\/ journal name can be string or array\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tcontainer.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ string\n\t\t\t\t\tcontainer.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ title can be string or array\n\t\t\tcase 'title':\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tjsonld.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\n\t\t\tcase 'author':\n\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\tjsonld.creator = [];\n\n\t\t\t\tfor (var j = 0; j < n; j++) {\n\t\t\t\t\tvar author_id = '';\n\n\t\t\t\t\t\/\/ use ORCID if available, otherwise hash\n\t\t\t\t\tif (doc.message[i][j].ORCID) {\n\t\t\t\t\t\tauthor_id = doc.message[i][j].ORCID;\n\t\t\t\t\t\tauthor_id = author_id.replace(\/http:\/, 'https:');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ #hash identifier \n\t\t\t\t\t\tauthor_id = jsonld['@id'] + '#author_' + (j + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar creator = {};\n\t\t\t\t\tcreator['@id'] = author_id;\n\t\t\t\t\tcreator['@type'] = 'Person';\n\n\t\t\t\t\t\/\/ name\n\t\t\t\t\tvar name = '';\n\t\t\t\t\tif (doc.message[i][j].given) {\n\t\t\t\t\t\tcreator.givenName = doc.message[i][j].given;\n\t\t\t\t\t\tname += doc.message[i][j].given;\n\t\t\t\t\t}\n\t\t\t\t\tif (doc.message[i][j].family) {\n\t\t\t\t\t\tcreator.familyName = doc.message[i][j].family;\n\t\t\t\t\t\tname += ' ' + doc.message[i][j].family;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (name != '') {\n\t\t\t\t\t\tcreator.name = name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (use_roles) {\n\t\t\t\t\t\tvar role_id = jsonld['@id'] + '#role' + (j + 1);\n\t\t\t\t\t\tvar role = {};\n\t\t\t\t\t\trole['@id'] = role_id;\n\t\t\t\t\t\trole['@type'] = 'Role';\n\n\t\t\t\t\t\trole.roleName = String(j + 1);\n\n\t\t\t\t\t\trole.creator = creator;\n\n\t\t\t\t\t\tjsonld.creator.push(role);\n\n\t\t\t\t  } else {\n\t\t\t\t\t\tjsonld.creator.push(creator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/*\n\t\t\t\t\t  \"reference\": [\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t   \"key\": \"11192_B1\",\n\t\t\t\t\t\t\t   \"first-page\": \"119\",\n\t\t\t\t\t\t\t   \"article-title\": \"Pseudocrangonyx, a new genus of subterranean amphipods from Japan.\",\n\t\t\t\t\t\t\t   \"volume\": \"10\",\n\t\t\t\t\t\t\t   \"author\": \"Akatsuka\",\n\t\t\t\t\t\t\t   \"year\": \"1922\",\n\t\t\t\t\t\t\t   \"journal-title\": \"Annotationes Zoologicae Japonenses\"\n\t\t\t\t\t\t   },\n\t\t\t\t *\/\n\t\t\tcase 'reference':\n\t\t\t\tif (use_citations) {\n\t\t\t\t\tjsonld.citation = [];\n\t\t\t\t\tvar n = doc.message[i].length;\n\t\t\t\t\tfor (var j = 0; j < n; j++) {\n\n\t\t\t\t\t   var reference_id = '';\n\n\t\t\t\t\t   var reference = {};\n\n\t\t\t\t\t   if (doc.message[i][j].DOI) {\n\n\t\t\t\t\t\t\t\/\/ DOI is id for citation\n\t\t\t\t\t\t\treference_id = \"https:\/\/doi.org\/\" + doc.message[i][j].DOI.toLowerCase();\n\n\t\t\t\t\t\t\t\/\/ DOI cleaning (sigh)\n\t\t\t\t\t\t\t\/* Sometimes publishes make a mess of this, e.g. \n\t\t\t\t\t\t\thttp:\/\/dx.doi.org\/10.1111\/j.1096-0031.2007.00176.x\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t  key: \"b129_103\",\n\t\t\t\t\t\t\t  DOI: \"10.1636\/H05-14 SC.1\",\n\t\t\t\t\t\t\t  doi-asserted-by: \"publisher\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*\/\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/sc.1?\/g, '');\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/\\s\/g, '');\n\n\t\t\t\t\t\t\t\/\/ Add DOI as identifier (to do)\n\t\t\t\t\t\t\tvar identifier = {};\n\t\t\t\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\t\t\t\tidentifier.value = doc.message[i][j].DOI.toLowerCase();\n\t\t\t\t\n\t\t\t\t\t\t\tif (!reference.identifier) {\n\t\t\t\t\t\t\t\treference.identifier = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treference.identifier.push(identifier);\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\/\/ No (known) DOI for cited work\n\n\t\t\t\t\t\t\t\/\/ identifier for cited reference\n\t\t\t\t\t\t\tvar key = doc.message[i][j].key;\n\n\t\t\t\t\t\t\tkey = key.replace(\/\\t\/g, '');\n\t\t\t\t\t\t\tkey = key.replace(\/\\n\/g, '');\n\n\t\t\t\t\t\t\t\/\/ replace characters not allowed\n\t\t\t\t\t\t\tkey = key.replace(\/\\|\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\\/\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\.\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\s\/g, '-');\n\n\t\t\t\t\t\t\treference_id = jsonld['@id'] + \"\/reference\" + \"#\" + key;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treference['@id'] = reference_id;\n\t\t\t\t\t\treference['@type'] = 'CreativeWork';\n\n\t\t\t\t\t\tvar reference_container = null;\n\n\t\t\t\t\t\t\/\/ add semi-structured data if we have it\n\t\t\t\t\t\tfor (var k in doc.message[i][j]) {\n\t\t\t\t\t\t\tswitch (k) {\n\t\t\t\t\t\t\t\tcase 'article-title':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'author':\n\t\t\t\t\t\t\t\t\treference.creator = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'first-page':\n\t\t\t\t\t\t\t\t\treference.pageStart = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'ISSN':\n\t\t\t\t\t\t\t\t\tvar issn = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tissn = issn.replace('http:\/\/id.crossref.org\/issn\/', '');\n\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (!reference_container.issn) {\n\t\t\t\t\t\t\t\t\t\treference_container.issn = [];\n\t\t\t\t\t\t\t\t\t\treference_container['@id'] = 'http:\/\/worldcat.org\/issn\/' + issn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treference_container.issn.push(issn);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'issue':\n\t\t\t\t\t\t\t\t\treference.issueNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\/\/ Journal\n\t\t\t\t\t\t\t\tcase 'journal-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\/\/ Book\n\t\t\t\t\t\t\t\tcase 'volume-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'CreativeWork';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'unstructured':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'volume':\n\t\t\t\t\t\t\t\t\treference.volumeNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'year':\n\t\t\t\t\t\t\t\t\treference.datePublished = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\treference.datePublished = reference.datePublished.replace(\/[a-z]$\/, '');\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (reference_container) {\n\t\t\t\t\t\t\treference.isPartOf = reference_container;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjsonld.citation.push(reference);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (container) {\n\t\tjsonld.isPartOf = container;\n\t}\n\n\n  return jsonld;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    \t\n    \t\/\/ CrossRef CSL    \t\n \t    if (doc['message-format'] == 'application\/vnd.crossref-api-message+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n   \t\n    \t\/\/ CSL-JSON\n\t    if (doc['message-format'] == 'application\/vnd.citationstyles.csl+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n\t         \t\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "pso": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction detect_language(s) {\n    var language = null;\n    var matched = 0;\n    var parts = [];\n\n    var regexp = [];\n\n    \/\/ https:\/\/gist.github.com\/ryanmcgrath\/982242\n    regexp['ja'] = \/[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B\/g;\n    \/\/ http:\/\/hjzhao.blogspot.co.uk\/2015\/09\/javascript-detect-chinese-character.html\n    regexp['zh'] = \/[\\u4E00-\\uFA29]\/g;\n    \/\/ http:\/\/stackoverflow.com\/questions\/32709687\/js-check-if-string-contains-only-cyrillic-symbols-and-spaces\n    regexp['ru'] = \/[\\u0400-\\u04FF]\/g;\n\n    for (var i in regexp) {\n        parts = s.match(regexp[i]);\n\n        if (parts != null) {\n            if (parts.length > matched) {\n                language = i;\n                matched = parts.length;\n            }\n        }\n    }\n\n    \/\/ require a minimum matching\n    if (matched < 2) {\n        language = null;\n    }\n\n    return language;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    \n    subject = subject.replace(\/<\/g, '%3C');\n    subject = subject.replace(\/>\/g, '%3E');\n    \n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n    \n    \tobject = object.replace(\/<\/g, '%3C');\n    \tobject = object.replace(\/>\/g, '%3E');    \n    \n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal                    \n                    switch (i) {\n                    \n                    \tcase '@type':\n                    \t\ttriples.push(\n                    \t\t\ttriple(subject, \n                    \t\t\t'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', \n                    \t\t\tproperty_to_uri(context, root[i][j]))\n                    \t\t);\n                    \t\tbreak;\n                    \n                    \tdefault:\n                    \t    triples.push(\n\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t'\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t); \n                    \t\tbreak;                   \n                    }\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \tbnode_count = 0;\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'pso';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction message(doc) {\n\n\tvar use_roles = true;\n\tvar use_citations = true;\n\n\tvar jsonld = {};\n\n\t\/\/ context\n\tjsonld['@context'] = 'http:\/\/schema.org\/';\n\n\tvar container = null;\n\n\t\/\/ identifier\n\tif (doc.message.DOI) {\n\t\tjsonld['@id'] = 'https:\/\/doi.org\/' + doc.message.DOI.toLowerCase();\n\t}\n\n\tfor (var i in doc.message) {\n\n\t\tswitch (i) {\n\n\t\t\tcase 'type':\n\t\t\t\tswitch (doc.message[i]) {\n\t\t\t\t\tcase 'article-journal':\n\t\t\t\t\tcase 'journal-article':\n\t\t\t\t\t\tjsonld['@type'] = 'ScholarlyArticle';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 'DOI':\n\t\t\t\tvar identifier = {};\n\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\tidentifier.value = doc.message[i].toLowerCase();\n\t\t\t\t\n\t\t\t\tif (!jsonld.identifier) {\n\t\t\t\t\tjsonld.identifier = [];\n\t\t\t\t}\n\t\t\t\tjsonld.identifier.push(identifier);\n\t\t\t\tbreak;\t\n\n\t\t\tcase 'volume':\n\t\t\t\tjsonld.volumeNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'issue':\n\t\t\t\tjsonld.issueNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'URL':\n\t\t\t\tjsonld.url = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'page':\n\t\t\tcase 'pages':\n\t\t\t\tvar parts = doc.message[i].match(\/^(.*)\\-(.*)$\/);\n\t\t\t\tif (parts) {\n\t\t\t\t\tjsonld.pageStart = parts[1];\n\t\t\t\t\tjsonld.pageEnd = parts[2];\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.pagination = doc.message[i];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'issued':\n\t\t\t\tvar date = '';\n\t\t\t\tvar dateparts = doc.message[i]['date-parts'][0];\n\n\t\t\t\tswitch (dateparts.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tdate = dateparts[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-00';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-' + (\"00\" + dateparts[2]).slice(-2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tjsonld.datePublished = date.toString();\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ tags\n\t\t\tcase 'subject':\n\t\t\t\tjsonld.keywords = [];\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tjsonld.keywords.push(doc.message[i][j]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'ISSN':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\tif (!container.issn) {\n\t\t\t\t\tcontainer.issn = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tcontainer.issn.push(doc.message[i][j]);\n\t\t\t\t}\n\n\t\t\t\tcontainer['@id'] = 'http:\/\/worldcat.org\/issn\/' + container.issn[0];\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ journal\t\t\t\n\t\t\tcase 'container-title':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\t\/\/ journal name can be string or array\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tcontainer.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ string\n\t\t\t\t\tcontainer.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ title can be string or array\n\t\t\tcase 'title':\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tjsonld.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\n\t\t\tcase 'author':\n\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\tjsonld.creator = [];\n\n\t\t\t\tfor (var j = 0; j < n; j++) {\n\t\t\t\t\tvar author_id = '';\n\n\t\t\t\t\t\/\/ use ORCID if available, otherwise hash\n\t\t\t\t\tif (doc.message[i][j].ORCID) {\n\t\t\t\t\t\tauthor_id = doc.message[i][j].ORCID;\n\t\t\t\t\t\tauthor_id = author_id.replace(\/http:\/, 'https:');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ #hash identifier \n\t\t\t\t\t\tauthor_id = jsonld['@id'] + '#author_' + (j + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar creator = {};\n\t\t\t\t\tcreator['@id'] = author_id;\n\t\t\t\t\tcreator['@type'] = 'Person';\n\n\t\t\t\t\t\/\/ name\n\t\t\t\t\tvar name = '';\n\t\t\t\t\tif (doc.message[i][j].given) {\n\t\t\t\t\t\tcreator.givenName = doc.message[i][j].given;\n\t\t\t\t\t\tname += doc.message[i][j].given;\n\t\t\t\t\t}\n\t\t\t\t\tif (doc.message[i][j].family) {\n\t\t\t\t\t\tcreator.familyName = doc.message[i][j].family;\n\t\t\t\t\t\tname += ' ' + doc.message[i][j].family;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (name != '') {\n\t\t\t\t\t\tcreator.name = name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (use_roles) {\n\t\t\t\t\t\tvar role_id = jsonld['@id'] + '#role' + (j + 1);\n\t\t\t\t\t\tvar role = {};\n\t\t\t\t\t\trole['@id'] = role_id;\n\t\t\t\t\t\trole['@type'] = 'Role';\n\n\t\t\t\t\t\trole.roleName = String(j + 1);\n\n\t\t\t\t\t\trole.creator = creator;\n\n\t\t\t\t\t\tjsonld.creator.push(role);\n\n\t\t\t\t  } else {\n\t\t\t\t\t\tjsonld.creator.push(creator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/*\n\t\t\t\t\t  \"reference\": [\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t   \"key\": \"11192_B1\",\n\t\t\t\t\t\t\t   \"first-page\": \"119\",\n\t\t\t\t\t\t\t   \"article-title\": \"Pseudocrangonyx, a new genus of subterranean amphipods from Japan.\",\n\t\t\t\t\t\t\t   \"volume\": \"10\",\n\t\t\t\t\t\t\t   \"author\": \"Akatsuka\",\n\t\t\t\t\t\t\t   \"year\": \"1922\",\n\t\t\t\t\t\t\t   \"journal-title\": \"Annotationes Zoologicae Japonenses\"\n\t\t\t\t\t\t   },\n\t\t\t\t *\/\n\t\t\tcase 'reference':\n\t\t\t\tif (use_citations) {\n\t\t\t\t\tjsonld.citation = [];\n\t\t\t\t\tvar n = doc.message[i].length;\n\t\t\t\t\tfor (var j = 0; j < n; j++) {\n\n\t\t\t\t\t   var reference_id = '';\n\n\t\t\t\t\t   var reference = {};\n\n\t\t\t\t\t   if (doc.message[i][j].DOI) {\n\n\t\t\t\t\t\t\t\/\/ DOI is id for citation\n\t\t\t\t\t\t\treference_id = \"https:\/\/doi.org\/\" + doc.message[i][j].DOI.toLowerCase();\n\n\t\t\t\t\t\t\t\/\/ DOI cleaning (sigh)\n\t\t\t\t\t\t\t\/* Sometimes publishes make a mess of this, e.g. \n\t\t\t\t\t\t\thttp:\/\/dx.doi.org\/10.1111\/j.1096-0031.2007.00176.x\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t  key: \"b129_103\",\n\t\t\t\t\t\t\t  DOI: \"10.1636\/H05-14 SC.1\",\n\t\t\t\t\t\t\t  doi-asserted-by: \"publisher\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*\/\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/sc.1?\/g, '');\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/\\s\/g, '');\n\n\t\t\t\t\t\t\t\/\/ Add DOI as identifier (to do)\n\t\t\t\t\t\t\tvar identifier = {};\n\t\t\t\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\t\t\t\tidentifier.value = doc.message[i][j].DOI.toLowerCase();\n\t\t\t\t\n\t\t\t\t\t\t\tif (!reference.identifier) {\n\t\t\t\t\t\t\t\treference.identifier = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treference.identifier.push(identifier);\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\/\/ No (known) DOI for cited work\n\n\t\t\t\t\t\t\t\/\/ identifier for cited reference\n\t\t\t\t\t\t\tvar key = doc.message[i][j].key;\n\n\t\t\t\t\t\t\tkey = key.replace(\/\\t\/g, '');\n\t\t\t\t\t\t\tkey = key.replace(\/\\n\/g, '');\n\n\t\t\t\t\t\t\t\/\/ replace characters not allowed\n\t\t\t\t\t\t\tkey = key.replace(\/\\|\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\\/\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\.\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\s\/g, '-');\n\n\t\t\t\t\t\t\treference_id = jsonld['@id'] + \"\/reference\" + \"#\" + key;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treference['@id'] = reference_id;\n\t\t\t\t\t\treference['@type'] = 'CreativeWork';\n\n\t\t\t\t\t\tvar reference_container = null;\n\n\t\t\t\t\t\t\/\/ add semi-structured data if we have it\n\t\t\t\t\t\tfor (var k in doc.message[i][j]) {\n\t\t\t\t\t\t\tswitch (k) {\n\t\t\t\t\t\t\t\tcase 'article-title':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'author':\n\t\t\t\t\t\t\t\t\treference.creator = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'first-page':\n\t\t\t\t\t\t\t\t\treference.pageStart = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'ISSN':\n\t\t\t\t\t\t\t\t\tvar issn = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tissn = issn.replace('http:\/\/id.crossref.org\/issn\/', '');\n\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (!reference_container.issn) {\n\t\t\t\t\t\t\t\t\t\treference_container.issn = [];\n\t\t\t\t\t\t\t\t\t\treference_container['@id'] = 'http:\/\/worldcat.org\/issn\/' + issn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treference_container.issn.push(issn);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'issue':\n\t\t\t\t\t\t\t\t\treference.issueNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\/\/ Journal\n\t\t\t\t\t\t\t\tcase 'journal-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\/\/ Book\n\t\t\t\t\t\t\t\tcase 'volume-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'CreativeWork';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'unstructured':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'volume':\n\t\t\t\t\t\t\t\t\treference.volumeNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'year':\n\t\t\t\t\t\t\t\t\treference.datePublished = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\treference.datePublished = reference.datePublished.replace(\/[a-z]$\/, '');\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (reference_container) {\n\t\t\t\t\t\t\treference.isPartOf = reference_container;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjsonld.citation.push(reference);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (container) {\n\t\tjsonld.isPartOf = container;\n\t}\n\n\n  return jsonld;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    \t\n    \t\/\/ CrossRef CSL    \t\n \t    if (doc['message-format'] == 'application\/vnd.crossref-api-message+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n   \t\n    \t\/\/ CSL-JSON\n\t    if (doc['message-format'] == 'application\/vnd.citationstyles.csl+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n\t         \t\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "pos": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction detect_language(s) {\n    var language = null;\n    var matched = 0;\n    var parts = [];\n\n    var regexp = [];\n\n    \/\/ https:\/\/gist.github.com\/ryanmcgrath\/982242\n    regexp['ja'] = \/[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B\/g;\n    \/\/ http:\/\/hjzhao.blogspot.co.uk\/2015\/09\/javascript-detect-chinese-character.html\n    regexp['zh'] = \/[\\u4E00-\\uFA29]\/g;\n    \/\/ http:\/\/stackoverflow.com\/questions\/32709687\/js-check-if-string-contains-only-cyrillic-symbols-and-spaces\n    regexp['ru'] = \/[\\u0400-\\u04FF]\/g;\n\n    for (var i in regexp) {\n        parts = s.match(regexp[i]);\n\n        if (parts != null) {\n            if (parts.length > matched) {\n                language = i;\n                matched = parts.length;\n            }\n        }\n    }\n\n    \/\/ require a minimum matching\n    if (matched < 2) {\n        language = null;\n    }\n\n    return language;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    \n    subject = subject.replace(\/<\/g, '%3C');\n    subject = subject.replace(\/>\/g, '%3E');\n    \n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n    \n    \tobject = object.replace(\/<\/g, '%3C');\n    \tobject = object.replace(\/>\/g, '%3E');    \n    \n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal                    \n                    switch (i) {\n                    \n                    \tcase '@type':\n                    \t\ttriples.push(\n                    \t\t\ttriple(subject, \n                    \t\t\t'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', \n                    \t\t\tproperty_to_uri(context, root[i][j]))\n                    \t\t);\n                    \t\tbreak;\n                    \n                    \tdefault:\n                    \t    triples.push(\n\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t'\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t); \n                    \t\tbreak;                   \n                    }\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \tbnode_count = 0;\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'pos';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction message(doc) {\n\n\tvar use_roles = true;\n\tvar use_citations = true;\n\n\tvar jsonld = {};\n\n\t\/\/ context\n\tjsonld['@context'] = 'http:\/\/schema.org\/';\n\n\tvar container = null;\n\n\t\/\/ identifier\n\tif (doc.message.DOI) {\n\t\tjsonld['@id'] = 'https:\/\/doi.org\/' + doc.message.DOI.toLowerCase();\n\t}\n\n\tfor (var i in doc.message) {\n\n\t\tswitch (i) {\n\n\t\t\tcase 'type':\n\t\t\t\tswitch (doc.message[i]) {\n\t\t\t\t\tcase 'article-journal':\n\t\t\t\t\tcase 'journal-article':\n\t\t\t\t\t\tjsonld['@type'] = 'ScholarlyArticle';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 'DOI':\n\t\t\t\tvar identifier = {};\n\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\tidentifier.value = doc.message[i].toLowerCase();\n\t\t\t\t\n\t\t\t\tif (!jsonld.identifier) {\n\t\t\t\t\tjsonld.identifier = [];\n\t\t\t\t}\n\t\t\t\tjsonld.identifier.push(identifier);\n\t\t\t\tbreak;\t\n\n\t\t\tcase 'volume':\n\t\t\t\tjsonld.volumeNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'issue':\n\t\t\t\tjsonld.issueNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'URL':\n\t\t\t\tjsonld.url = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'page':\n\t\t\tcase 'pages':\n\t\t\t\tvar parts = doc.message[i].match(\/^(.*)\\-(.*)$\/);\n\t\t\t\tif (parts) {\n\t\t\t\t\tjsonld.pageStart = parts[1];\n\t\t\t\t\tjsonld.pageEnd = parts[2];\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.pagination = doc.message[i];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'issued':\n\t\t\t\tvar date = '';\n\t\t\t\tvar dateparts = doc.message[i]['date-parts'][0];\n\n\t\t\t\tswitch (dateparts.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tdate = dateparts[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-00';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-' + (\"00\" + dateparts[2]).slice(-2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tjsonld.datePublished = date.toString();\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ tags\n\t\t\tcase 'subject':\n\t\t\t\tjsonld.keywords = [];\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tjsonld.keywords.push(doc.message[i][j]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'ISSN':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\tif (!container.issn) {\n\t\t\t\t\tcontainer.issn = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tcontainer.issn.push(doc.message[i][j]);\n\t\t\t\t}\n\n\t\t\t\tcontainer['@id'] = 'http:\/\/worldcat.org\/issn\/' + container.issn[0];\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ journal\t\t\t\n\t\t\tcase 'container-title':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\t\/\/ journal name can be string or array\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tcontainer.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ string\n\t\t\t\t\tcontainer.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ title can be string or array\n\t\t\tcase 'title':\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tjsonld.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\n\t\t\tcase 'author':\n\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\tjsonld.creator = [];\n\n\t\t\t\tfor (var j = 0; j < n; j++) {\n\t\t\t\t\tvar author_id = '';\n\n\t\t\t\t\t\/\/ use ORCID if available, otherwise hash\n\t\t\t\t\tif (doc.message[i][j].ORCID) {\n\t\t\t\t\t\tauthor_id = doc.message[i][j].ORCID;\n\t\t\t\t\t\tauthor_id = author_id.replace(\/http:\/, 'https:');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ #hash identifier \n\t\t\t\t\t\tauthor_id = jsonld['@id'] + '#author_' + (j + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar creator = {};\n\t\t\t\t\tcreator['@id'] = author_id;\n\t\t\t\t\tcreator['@type'] = 'Person';\n\n\t\t\t\t\t\/\/ name\n\t\t\t\t\tvar name = '';\n\t\t\t\t\tif (doc.message[i][j].given) {\n\t\t\t\t\t\tcreator.givenName = doc.message[i][j].given;\n\t\t\t\t\t\tname += doc.message[i][j].given;\n\t\t\t\t\t}\n\t\t\t\t\tif (doc.message[i][j].family) {\n\t\t\t\t\t\tcreator.familyName = doc.message[i][j].family;\n\t\t\t\t\t\tname += ' ' + doc.message[i][j].family;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (name != '') {\n\t\t\t\t\t\tcreator.name = name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (use_roles) {\n\t\t\t\t\t\tvar role_id = jsonld['@id'] + '#role' + (j + 1);\n\t\t\t\t\t\tvar role = {};\n\t\t\t\t\t\trole['@id'] = role_id;\n\t\t\t\t\t\trole['@type'] = 'Role';\n\n\t\t\t\t\t\trole.roleName = String(j + 1);\n\n\t\t\t\t\t\trole.creator = creator;\n\n\t\t\t\t\t\tjsonld.creator.push(role);\n\n\t\t\t\t  } else {\n\t\t\t\t\t\tjsonld.creator.push(creator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/*\n\t\t\t\t\t  \"reference\": [\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t   \"key\": \"11192_B1\",\n\t\t\t\t\t\t\t   \"first-page\": \"119\",\n\t\t\t\t\t\t\t   \"article-title\": \"Pseudocrangonyx, a new genus of subterranean amphipods from Japan.\",\n\t\t\t\t\t\t\t   \"volume\": \"10\",\n\t\t\t\t\t\t\t   \"author\": \"Akatsuka\",\n\t\t\t\t\t\t\t   \"year\": \"1922\",\n\t\t\t\t\t\t\t   \"journal-title\": \"Annotationes Zoologicae Japonenses\"\n\t\t\t\t\t\t   },\n\t\t\t\t *\/\n\t\t\tcase 'reference':\n\t\t\t\tif (use_citations) {\n\t\t\t\t\tjsonld.citation = [];\n\t\t\t\t\tvar n = doc.message[i].length;\n\t\t\t\t\tfor (var j = 0; j < n; j++) {\n\n\t\t\t\t\t   var reference_id = '';\n\n\t\t\t\t\t   var reference = {};\n\n\t\t\t\t\t   if (doc.message[i][j].DOI) {\n\n\t\t\t\t\t\t\t\/\/ DOI is id for citation\n\t\t\t\t\t\t\treference_id = \"https:\/\/doi.org\/\" + doc.message[i][j].DOI.toLowerCase();\n\n\t\t\t\t\t\t\t\/\/ DOI cleaning (sigh)\n\t\t\t\t\t\t\t\/* Sometimes publishes make a mess of this, e.g. \n\t\t\t\t\t\t\thttp:\/\/dx.doi.org\/10.1111\/j.1096-0031.2007.00176.x\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t  key: \"b129_103\",\n\t\t\t\t\t\t\t  DOI: \"10.1636\/H05-14 SC.1\",\n\t\t\t\t\t\t\t  doi-asserted-by: \"publisher\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*\/\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/sc.1?\/g, '');\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/\\s\/g, '');\n\n\t\t\t\t\t\t\t\/\/ Add DOI as identifier (to do)\n\t\t\t\t\t\t\tvar identifier = {};\n\t\t\t\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\t\t\t\tidentifier.value = doc.message[i][j].DOI.toLowerCase();\n\t\t\t\t\n\t\t\t\t\t\t\tif (!reference.identifier) {\n\t\t\t\t\t\t\t\treference.identifier = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treference.identifier.push(identifier);\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\/\/ No (known) DOI for cited work\n\n\t\t\t\t\t\t\t\/\/ identifier for cited reference\n\t\t\t\t\t\t\tvar key = doc.message[i][j].key;\n\n\t\t\t\t\t\t\tkey = key.replace(\/\\t\/g, '');\n\t\t\t\t\t\t\tkey = key.replace(\/\\n\/g, '');\n\n\t\t\t\t\t\t\t\/\/ replace characters not allowed\n\t\t\t\t\t\t\tkey = key.replace(\/\\|\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\\/\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\.\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\s\/g, '-');\n\n\t\t\t\t\t\t\treference_id = jsonld['@id'] + \"\/reference\" + \"#\" + key;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treference['@id'] = reference_id;\n\t\t\t\t\t\treference['@type'] = 'CreativeWork';\n\n\t\t\t\t\t\tvar reference_container = null;\n\n\t\t\t\t\t\t\/\/ add semi-structured data if we have it\n\t\t\t\t\t\tfor (var k in doc.message[i][j]) {\n\t\t\t\t\t\t\tswitch (k) {\n\t\t\t\t\t\t\t\tcase 'article-title':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'author':\n\t\t\t\t\t\t\t\t\treference.creator = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'first-page':\n\t\t\t\t\t\t\t\t\treference.pageStart = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'ISSN':\n\t\t\t\t\t\t\t\t\tvar issn = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tissn = issn.replace('http:\/\/id.crossref.org\/issn\/', '');\n\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (!reference_container.issn) {\n\t\t\t\t\t\t\t\t\t\treference_container.issn = [];\n\t\t\t\t\t\t\t\t\t\treference_container['@id'] = 'http:\/\/worldcat.org\/issn\/' + issn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treference_container.issn.push(issn);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'issue':\n\t\t\t\t\t\t\t\t\treference.issueNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\/\/ Journal\n\t\t\t\t\t\t\t\tcase 'journal-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\/\/ Book\n\t\t\t\t\t\t\t\tcase 'volume-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'CreativeWork';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'unstructured':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'volume':\n\t\t\t\t\t\t\t\t\treference.volumeNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'year':\n\t\t\t\t\t\t\t\t\treference.datePublished = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\treference.datePublished = reference.datePublished.replace(\/[a-z]$\/, '');\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (reference_container) {\n\t\t\t\t\t\t\treference.isPartOf = reference_container;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjsonld.citation.push(reference);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (container) {\n\t\tjsonld.isPartOf = container;\n\t}\n\n\n  return jsonld;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    \t\n    \t\/\/ CrossRef CSL    \t\n \t    if (doc['message-format'] == 'application\/vnd.crossref-api-message+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n   \t\n    \t\/\/ CSL-JSON\n\t    if (doc['message-format'] == 'application\/vnd.citationstyles.csl+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n\t         \t\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "osp": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction detect_language(s) {\n    var language = null;\n    var matched = 0;\n    var parts = [];\n\n    var regexp = [];\n\n    \/\/ https:\/\/gist.github.com\/ryanmcgrath\/982242\n    regexp['ja'] = \/[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B\/g;\n    \/\/ http:\/\/hjzhao.blogspot.co.uk\/2015\/09\/javascript-detect-chinese-character.html\n    regexp['zh'] = \/[\\u4E00-\\uFA29]\/g;\n    \/\/ http:\/\/stackoverflow.com\/questions\/32709687\/js-check-if-string-contains-only-cyrillic-symbols-and-spaces\n    regexp['ru'] = \/[\\u0400-\\u04FF]\/g;\n\n    for (var i in regexp) {\n        parts = s.match(regexp[i]);\n\n        if (parts != null) {\n            if (parts.length > matched) {\n                language = i;\n                matched = parts.length;\n            }\n        }\n    }\n\n    \/\/ require a minimum matching\n    if (matched < 2) {\n        language = null;\n    }\n\n    return language;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    \n    subject = subject.replace(\/<\/g, '%3C');\n    subject = subject.replace(\/>\/g, '%3E');\n    \n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n    \n    \tobject = object.replace(\/<\/g, '%3C');\n    \tobject = object.replace(\/>\/g, '%3E');    \n    \n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal                    \n                    switch (i) {\n                    \n                    \tcase '@type':\n                    \t\ttriples.push(\n                    \t\t\ttriple(subject, \n                    \t\t\t'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', \n                    \t\t\tproperty_to_uri(context, root[i][j]))\n                    \t\t);\n                    \t\tbreak;\n                    \n                    \tdefault:\n                    \t    triples.push(\n\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t'\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t); \n                    \t\tbreak;                   \n                    }\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \tbnode_count = 0;\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'osp';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction message(doc) {\n\n\tvar use_roles = true;\n\tvar use_citations = true;\n\n\tvar jsonld = {};\n\n\t\/\/ context\n\tjsonld['@context'] = 'http:\/\/schema.org\/';\n\n\tvar container = null;\n\n\t\/\/ identifier\n\tif (doc.message.DOI) {\n\t\tjsonld['@id'] = 'https:\/\/doi.org\/' + doc.message.DOI.toLowerCase();\n\t}\n\n\tfor (var i in doc.message) {\n\n\t\tswitch (i) {\n\n\t\t\tcase 'type':\n\t\t\t\tswitch (doc.message[i]) {\n\t\t\t\t\tcase 'article-journal':\n\t\t\t\t\tcase 'journal-article':\n\t\t\t\t\t\tjsonld['@type'] = 'ScholarlyArticle';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 'DOI':\n\t\t\t\tvar identifier = {};\n\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\tidentifier.value = doc.message[i].toLowerCase();\n\t\t\t\t\n\t\t\t\tif (!jsonld.identifier) {\n\t\t\t\t\tjsonld.identifier = [];\n\t\t\t\t}\n\t\t\t\tjsonld.identifier.push(identifier);\n\t\t\t\tbreak;\t\n\n\t\t\tcase 'volume':\n\t\t\t\tjsonld.volumeNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'issue':\n\t\t\t\tjsonld.issueNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'URL':\n\t\t\t\tjsonld.url = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'page':\n\t\t\tcase 'pages':\n\t\t\t\tvar parts = doc.message[i].match(\/^(.*)\\-(.*)$\/);\n\t\t\t\tif (parts) {\n\t\t\t\t\tjsonld.pageStart = parts[1];\n\t\t\t\t\tjsonld.pageEnd = parts[2];\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.pagination = doc.message[i];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'issued':\n\t\t\t\tvar date = '';\n\t\t\t\tvar dateparts = doc.message[i]['date-parts'][0];\n\n\t\t\t\tswitch (dateparts.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tdate = dateparts[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-00';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-' + (\"00\" + dateparts[2]).slice(-2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tjsonld.datePublished = date.toString();\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ tags\n\t\t\tcase 'subject':\n\t\t\t\tjsonld.keywords = [];\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tjsonld.keywords.push(doc.message[i][j]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'ISSN':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\tif (!container.issn) {\n\t\t\t\t\tcontainer.issn = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tcontainer.issn.push(doc.message[i][j]);\n\t\t\t\t}\n\n\t\t\t\tcontainer['@id'] = 'http:\/\/worldcat.org\/issn\/' + container.issn[0];\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ journal\t\t\t\n\t\t\tcase 'container-title':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\t\/\/ journal name can be string or array\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tcontainer.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ string\n\t\t\t\t\tcontainer.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ title can be string or array\n\t\t\tcase 'title':\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tjsonld.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\n\t\t\tcase 'author':\n\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\tjsonld.creator = [];\n\n\t\t\t\tfor (var j = 0; j < n; j++) {\n\t\t\t\t\tvar author_id = '';\n\n\t\t\t\t\t\/\/ use ORCID if available, otherwise hash\n\t\t\t\t\tif (doc.message[i][j].ORCID) {\n\t\t\t\t\t\tauthor_id = doc.message[i][j].ORCID;\n\t\t\t\t\t\tauthor_id = author_id.replace(\/http:\/, 'https:');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ #hash identifier \n\t\t\t\t\t\tauthor_id = jsonld['@id'] + '#author_' + (j + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar creator = {};\n\t\t\t\t\tcreator['@id'] = author_id;\n\t\t\t\t\tcreator['@type'] = 'Person';\n\n\t\t\t\t\t\/\/ name\n\t\t\t\t\tvar name = '';\n\t\t\t\t\tif (doc.message[i][j].given) {\n\t\t\t\t\t\tcreator.givenName = doc.message[i][j].given;\n\t\t\t\t\t\tname += doc.message[i][j].given;\n\t\t\t\t\t}\n\t\t\t\t\tif (doc.message[i][j].family) {\n\t\t\t\t\t\tcreator.familyName = doc.message[i][j].family;\n\t\t\t\t\t\tname += ' ' + doc.message[i][j].family;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (name != '') {\n\t\t\t\t\t\tcreator.name = name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (use_roles) {\n\t\t\t\t\t\tvar role_id = jsonld['@id'] + '#role' + (j + 1);\n\t\t\t\t\t\tvar role = {};\n\t\t\t\t\t\trole['@id'] = role_id;\n\t\t\t\t\t\trole['@type'] = 'Role';\n\n\t\t\t\t\t\trole.roleName = String(j + 1);\n\n\t\t\t\t\t\trole.creator = creator;\n\n\t\t\t\t\t\tjsonld.creator.push(role);\n\n\t\t\t\t  } else {\n\t\t\t\t\t\tjsonld.creator.push(creator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/*\n\t\t\t\t\t  \"reference\": [\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t   \"key\": \"11192_B1\",\n\t\t\t\t\t\t\t   \"first-page\": \"119\",\n\t\t\t\t\t\t\t   \"article-title\": \"Pseudocrangonyx, a new genus of subterranean amphipods from Japan.\",\n\t\t\t\t\t\t\t   \"volume\": \"10\",\n\t\t\t\t\t\t\t   \"author\": \"Akatsuka\",\n\t\t\t\t\t\t\t   \"year\": \"1922\",\n\t\t\t\t\t\t\t   \"journal-title\": \"Annotationes Zoologicae Japonenses\"\n\t\t\t\t\t\t   },\n\t\t\t\t *\/\n\t\t\tcase 'reference':\n\t\t\t\tif (use_citations) {\n\t\t\t\t\tjsonld.citation = [];\n\t\t\t\t\tvar n = doc.message[i].length;\n\t\t\t\t\tfor (var j = 0; j < n; j++) {\n\n\t\t\t\t\t   var reference_id = '';\n\n\t\t\t\t\t   var reference = {};\n\n\t\t\t\t\t   if (doc.message[i][j].DOI) {\n\n\t\t\t\t\t\t\t\/\/ DOI is id for citation\n\t\t\t\t\t\t\treference_id = \"https:\/\/doi.org\/\" + doc.message[i][j].DOI.toLowerCase();\n\n\t\t\t\t\t\t\t\/\/ DOI cleaning (sigh)\n\t\t\t\t\t\t\t\/* Sometimes publishes make a mess of this, e.g. \n\t\t\t\t\t\t\thttp:\/\/dx.doi.org\/10.1111\/j.1096-0031.2007.00176.x\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t  key: \"b129_103\",\n\t\t\t\t\t\t\t  DOI: \"10.1636\/H05-14 SC.1\",\n\t\t\t\t\t\t\t  doi-asserted-by: \"publisher\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*\/\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/sc.1?\/g, '');\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/\\s\/g, '');\n\n\t\t\t\t\t\t\t\/\/ Add DOI as identifier (to do)\n\t\t\t\t\t\t\tvar identifier = {};\n\t\t\t\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\t\t\t\tidentifier.value = doc.message[i][j].DOI.toLowerCase();\n\t\t\t\t\n\t\t\t\t\t\t\tif (!reference.identifier) {\n\t\t\t\t\t\t\t\treference.identifier = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treference.identifier.push(identifier);\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\/\/ No (known) DOI for cited work\n\n\t\t\t\t\t\t\t\/\/ identifier for cited reference\n\t\t\t\t\t\t\tvar key = doc.message[i][j].key;\n\n\t\t\t\t\t\t\tkey = key.replace(\/\\t\/g, '');\n\t\t\t\t\t\t\tkey = key.replace(\/\\n\/g, '');\n\n\t\t\t\t\t\t\t\/\/ replace characters not allowed\n\t\t\t\t\t\t\tkey = key.replace(\/\\|\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\\/\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\.\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\s\/g, '-');\n\n\t\t\t\t\t\t\treference_id = jsonld['@id'] + \"\/reference\" + \"#\" + key;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treference['@id'] = reference_id;\n\t\t\t\t\t\treference['@type'] = 'CreativeWork';\n\n\t\t\t\t\t\tvar reference_container = null;\n\n\t\t\t\t\t\t\/\/ add semi-structured data if we have it\n\t\t\t\t\t\tfor (var k in doc.message[i][j]) {\n\t\t\t\t\t\t\tswitch (k) {\n\t\t\t\t\t\t\t\tcase 'article-title':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'author':\n\t\t\t\t\t\t\t\t\treference.creator = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'first-page':\n\t\t\t\t\t\t\t\t\treference.pageStart = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'ISSN':\n\t\t\t\t\t\t\t\t\tvar issn = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tissn = issn.replace('http:\/\/id.crossref.org\/issn\/', '');\n\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (!reference_container.issn) {\n\t\t\t\t\t\t\t\t\t\treference_container.issn = [];\n\t\t\t\t\t\t\t\t\t\treference_container['@id'] = 'http:\/\/worldcat.org\/issn\/' + issn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treference_container.issn.push(issn);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'issue':\n\t\t\t\t\t\t\t\t\treference.issueNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\/\/ Journal\n\t\t\t\t\t\t\t\tcase 'journal-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\/\/ Book\n\t\t\t\t\t\t\t\tcase 'volume-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'CreativeWork';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'unstructured':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'volume':\n\t\t\t\t\t\t\t\t\treference.volumeNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'year':\n\t\t\t\t\t\t\t\t\treference.datePublished = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\treference.datePublished = reference.datePublished.replace(\/[a-z]$\/, '');\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (reference_container) {\n\t\t\t\t\t\t\treference.isPartOf = reference_container;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjsonld.citation.push(reference);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (container) {\n\t\tjsonld.isPartOf = container;\n\t}\n\n\n  return jsonld;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    \t\n    \t\/\/ CrossRef CSL    \t\n \t    if (doc['message-format'] == 'application\/vnd.crossref-api-message+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n   \t\n    \t\/\/ CSL-JSON\n\t    if (doc['message-format'] == 'application\/vnd.citationstyles.csl+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n\t         \t\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "ops": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction detect_language(s) {\n    var language = null;\n    var matched = 0;\n    var parts = [];\n\n    var regexp = [];\n\n    \/\/ https:\/\/gist.github.com\/ryanmcgrath\/982242\n    regexp['ja'] = \/[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B\/g;\n    \/\/ http:\/\/hjzhao.blogspot.co.uk\/2015\/09\/javascript-detect-chinese-character.html\n    regexp['zh'] = \/[\\u4E00-\\uFA29]\/g;\n    \/\/ http:\/\/stackoverflow.com\/questions\/32709687\/js-check-if-string-contains-only-cyrillic-symbols-and-spaces\n    regexp['ru'] = \/[\\u0400-\\u04FF]\/g;\n\n    for (var i in regexp) {\n        parts = s.match(regexp[i]);\n\n        if (parts != null) {\n            if (parts.length > matched) {\n                language = i;\n                matched = parts.length;\n            }\n        }\n    }\n\n    \/\/ require a minimum matching\n    if (matched < 2) {\n        language = null;\n    }\n\n    return language;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    \n    subject = subject.replace(\/<\/g, '%3C');\n    subject = subject.replace(\/>\/g, '%3E');\n    \n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n    \n    \tobject = object.replace(\/<\/g, '%3C');\n    \tobject = object.replace(\/>\/g, '%3E');    \n    \n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal                    \n                    switch (i) {\n                    \n                    \tcase '@type':\n                    \t\ttriples.push(\n                    \t\t\ttriple(subject, \n                    \t\t\t'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', \n                    \t\t\tproperty_to_uri(context, root[i][j]))\n                    \t\t);\n                    \t\tbreak;\n                    \n                    \tdefault:\n                    \t    triples.push(\n\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t'\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t); \n                    \t\tbreak;                   \n                    }\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \tbnode_count = 0;\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'ops';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction message(doc) {\n\n\tvar use_roles = true;\n\tvar use_citations = true;\n\n\tvar jsonld = {};\n\n\t\/\/ context\n\tjsonld['@context'] = 'http:\/\/schema.org\/';\n\n\tvar container = null;\n\n\t\/\/ identifier\n\tif (doc.message.DOI) {\n\t\tjsonld['@id'] = 'https:\/\/doi.org\/' + doc.message.DOI.toLowerCase();\n\t}\n\n\tfor (var i in doc.message) {\n\n\t\tswitch (i) {\n\n\t\t\tcase 'type':\n\t\t\t\tswitch (doc.message[i]) {\n\t\t\t\t\tcase 'article-journal':\n\t\t\t\t\tcase 'journal-article':\n\t\t\t\t\t\tjsonld['@type'] = 'ScholarlyArticle';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 'DOI':\n\t\t\t\tvar identifier = {};\n\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\tidentifier.value = doc.message[i].toLowerCase();\n\t\t\t\t\n\t\t\t\tif (!jsonld.identifier) {\n\t\t\t\t\tjsonld.identifier = [];\n\t\t\t\t}\n\t\t\t\tjsonld.identifier.push(identifier);\n\t\t\t\tbreak;\t\n\n\t\t\tcase 'volume':\n\t\t\t\tjsonld.volumeNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'issue':\n\t\t\t\tjsonld.issueNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'URL':\n\t\t\t\tjsonld.url = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'page':\n\t\t\tcase 'pages':\n\t\t\t\tvar parts = doc.message[i].match(\/^(.*)\\-(.*)$\/);\n\t\t\t\tif (parts) {\n\t\t\t\t\tjsonld.pageStart = parts[1];\n\t\t\t\t\tjsonld.pageEnd = parts[2];\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.pagination = doc.message[i];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'issued':\n\t\t\t\tvar date = '';\n\t\t\t\tvar dateparts = doc.message[i]['date-parts'][0];\n\n\t\t\t\tswitch (dateparts.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tdate = dateparts[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-00';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-' + (\"00\" + dateparts[2]).slice(-2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tjsonld.datePublished = date.toString();\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ tags\n\t\t\tcase 'subject':\n\t\t\t\tjsonld.keywords = [];\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tjsonld.keywords.push(doc.message[i][j]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'ISSN':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\tif (!container.issn) {\n\t\t\t\t\tcontainer.issn = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tcontainer.issn.push(doc.message[i][j]);\n\t\t\t\t}\n\n\t\t\t\tcontainer['@id'] = 'http:\/\/worldcat.org\/issn\/' + container.issn[0];\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ journal\t\t\t\n\t\t\tcase 'container-title':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\t\/\/ journal name can be string or array\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tcontainer.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ string\n\t\t\t\t\tcontainer.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ title can be string or array\n\t\t\tcase 'title':\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tjsonld.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\n\t\t\tcase 'author':\n\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\tjsonld.creator = [];\n\n\t\t\t\tfor (var j = 0; j < n; j++) {\n\t\t\t\t\tvar author_id = '';\n\n\t\t\t\t\t\/\/ use ORCID if available, otherwise hash\n\t\t\t\t\tif (doc.message[i][j].ORCID) {\n\t\t\t\t\t\tauthor_id = doc.message[i][j].ORCID;\n\t\t\t\t\t\tauthor_id = author_id.replace(\/http:\/, 'https:');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ #hash identifier \n\t\t\t\t\t\tauthor_id = jsonld['@id'] + '#author_' + (j + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar creator = {};\n\t\t\t\t\tcreator['@id'] = author_id;\n\t\t\t\t\tcreator['@type'] = 'Person';\n\n\t\t\t\t\t\/\/ name\n\t\t\t\t\tvar name = '';\n\t\t\t\t\tif (doc.message[i][j].given) {\n\t\t\t\t\t\tcreator.givenName = doc.message[i][j].given;\n\t\t\t\t\t\tname += doc.message[i][j].given;\n\t\t\t\t\t}\n\t\t\t\t\tif (doc.message[i][j].family) {\n\t\t\t\t\t\tcreator.familyName = doc.message[i][j].family;\n\t\t\t\t\t\tname += ' ' + doc.message[i][j].family;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (name != '') {\n\t\t\t\t\t\tcreator.name = name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (use_roles) {\n\t\t\t\t\t\tvar role_id = jsonld['@id'] + '#role' + (j + 1);\n\t\t\t\t\t\tvar role = {};\n\t\t\t\t\t\trole['@id'] = role_id;\n\t\t\t\t\t\trole['@type'] = 'Role';\n\n\t\t\t\t\t\trole.roleName = String(j + 1);\n\n\t\t\t\t\t\trole.creator = creator;\n\n\t\t\t\t\t\tjsonld.creator.push(role);\n\n\t\t\t\t  } else {\n\t\t\t\t\t\tjsonld.creator.push(creator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/*\n\t\t\t\t\t  \"reference\": [\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t   \"key\": \"11192_B1\",\n\t\t\t\t\t\t\t   \"first-page\": \"119\",\n\t\t\t\t\t\t\t   \"article-title\": \"Pseudocrangonyx, a new genus of subterranean amphipods from Japan.\",\n\t\t\t\t\t\t\t   \"volume\": \"10\",\n\t\t\t\t\t\t\t   \"author\": \"Akatsuka\",\n\t\t\t\t\t\t\t   \"year\": \"1922\",\n\t\t\t\t\t\t\t   \"journal-title\": \"Annotationes Zoologicae Japonenses\"\n\t\t\t\t\t\t   },\n\t\t\t\t *\/\n\t\t\tcase 'reference':\n\t\t\t\tif (use_citations) {\n\t\t\t\t\tjsonld.citation = [];\n\t\t\t\t\tvar n = doc.message[i].length;\n\t\t\t\t\tfor (var j = 0; j < n; j++) {\n\n\t\t\t\t\t   var reference_id = '';\n\n\t\t\t\t\t   var reference = {};\n\n\t\t\t\t\t   if (doc.message[i][j].DOI) {\n\n\t\t\t\t\t\t\t\/\/ DOI is id for citation\n\t\t\t\t\t\t\treference_id = \"https:\/\/doi.org\/\" + doc.message[i][j].DOI.toLowerCase();\n\n\t\t\t\t\t\t\t\/\/ DOI cleaning (sigh)\n\t\t\t\t\t\t\t\/* Sometimes publishes make a mess of this, e.g. \n\t\t\t\t\t\t\thttp:\/\/dx.doi.org\/10.1111\/j.1096-0031.2007.00176.x\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t  key: \"b129_103\",\n\t\t\t\t\t\t\t  DOI: \"10.1636\/H05-14 SC.1\",\n\t\t\t\t\t\t\t  doi-asserted-by: \"publisher\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*\/\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/sc.1?\/g, '');\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/\\s\/g, '');\n\n\t\t\t\t\t\t\t\/\/ Add DOI as identifier (to do)\n\t\t\t\t\t\t\tvar identifier = {};\n\t\t\t\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\t\t\t\tidentifier.value = doc.message[i][j].DOI.toLowerCase();\n\t\t\t\t\n\t\t\t\t\t\t\tif (!reference.identifier) {\n\t\t\t\t\t\t\t\treference.identifier = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treference.identifier.push(identifier);\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\/\/ No (known) DOI for cited work\n\n\t\t\t\t\t\t\t\/\/ identifier for cited reference\n\t\t\t\t\t\t\tvar key = doc.message[i][j].key;\n\n\t\t\t\t\t\t\tkey = key.replace(\/\\t\/g, '');\n\t\t\t\t\t\t\tkey = key.replace(\/\\n\/g, '');\n\n\t\t\t\t\t\t\t\/\/ replace characters not allowed\n\t\t\t\t\t\t\tkey = key.replace(\/\\|\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\\/\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\.\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\s\/g, '-');\n\n\t\t\t\t\t\t\treference_id = jsonld['@id'] + \"\/reference\" + \"#\" + key;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treference['@id'] = reference_id;\n\t\t\t\t\t\treference['@type'] = 'CreativeWork';\n\n\t\t\t\t\t\tvar reference_container = null;\n\n\t\t\t\t\t\t\/\/ add semi-structured data if we have it\n\t\t\t\t\t\tfor (var k in doc.message[i][j]) {\n\t\t\t\t\t\t\tswitch (k) {\n\t\t\t\t\t\t\t\tcase 'article-title':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'author':\n\t\t\t\t\t\t\t\t\treference.creator = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'first-page':\n\t\t\t\t\t\t\t\t\treference.pageStart = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'ISSN':\n\t\t\t\t\t\t\t\t\tvar issn = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tissn = issn.replace('http:\/\/id.crossref.org\/issn\/', '');\n\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (!reference_container.issn) {\n\t\t\t\t\t\t\t\t\t\treference_container.issn = [];\n\t\t\t\t\t\t\t\t\t\treference_container['@id'] = 'http:\/\/worldcat.org\/issn\/' + issn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treference_container.issn.push(issn);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'issue':\n\t\t\t\t\t\t\t\t\treference.issueNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\/\/ Journal\n\t\t\t\t\t\t\t\tcase 'journal-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\/\/ Book\n\t\t\t\t\t\t\t\tcase 'volume-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'CreativeWork';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'unstructured':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'volume':\n\t\t\t\t\t\t\t\t\treference.volumeNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'year':\n\t\t\t\t\t\t\t\t\treference.datePublished = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\treference.datePublished = reference.datePublished.replace(\/[a-z]$\/, '');\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (reference_container) {\n\t\t\t\t\t\t\treference.isPartOf = reference_container;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjsonld.citation.push(reference);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (container) {\n\t\tjsonld.isPartOf = container;\n\t}\n\n\n  return jsonld;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    \t\n    \t\/\/ CrossRef CSL    \t\n \t    if (doc['message-format'] == 'application\/vnd.crossref-api-message+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n   \t\n    \t\/\/ CSL-JSON\n\t    if (doc['message-format'] == 'application\/vnd.citationstyles.csl+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n\t         \t\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "sop": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction detect_language(s) {\n    var language = null;\n    var matched = 0;\n    var parts = [];\n\n    var regexp = [];\n\n    \/\/ https:\/\/gist.github.com\/ryanmcgrath\/982242\n    regexp['ja'] = \/[\\u3000-\\u303F]|[\\u3040-\\u309F]|[\\u30A0-\\u30FF]|[\\uFF00-\\uFFEF]|[\\u4E00-\\u9FAF]|[\\u2605-\\u2606]|[\\u2190-\\u2195]|\\u203B\/g;\n    \/\/ http:\/\/hjzhao.blogspot.co.uk\/2015\/09\/javascript-detect-chinese-character.html\n    regexp['zh'] = \/[\\u4E00-\\uFA29]\/g;\n    \/\/ http:\/\/stackoverflow.com\/questions\/32709687\/js-check-if-string-contains-only-cyrillic-symbols-and-spaces\n    regexp['ru'] = \/[\\u0400-\\u04FF]\/g;\n\n    for (var i in regexp) {\n        parts = s.match(regexp[i]);\n\n        if (parts != null) {\n            if (parts.length > matched) {\n                language = i;\n                matched = parts.length;\n            }\n        }\n    }\n\n    \/\/ require a minimum matching\n    if (matched < 2) {\n        language = null;\n    }\n\n    return language;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    \n    subject = subject.replace(\/<\/g, '%3C');\n    subject = subject.replace(\/>\/g, '%3E');\n    \n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n    \n    \tobject = object.replace(\/<\/g, '%3C');\n    \tobject = object.replace(\/>\/g, '%3E');    \n    \n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    \n\tif (context) {\n\t\tvar m = property.match(\/([a-z]+):([a-z]+)\/i);\n\t\tif (m) {\n\t\t\tif (context[m[1]]) {\n\t\t\t\turi = context[m[1]] + m[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (context['@vocab']) {\n\t\t\t\turi = context['@vocab'] + property;\n\t\t\t} else {\n\t\t\t\tif (typeof context === 'string') {\n\t\t\t\t\turi = context + property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n\t\t\t\t\t\/\/ literal with language code\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    }\n                    \n\t\t\t\t\t\/\/ typed entity, as in DBPedia expanded JSON-LD\n                    if (root[i][j]['value'] && root[i][j]['type']) {\n                    \tswitch (root[i][j]['type']) {\n                    \t\n                    \t\tcase 'uri':\n\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\troot[i][j]['value']\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\tbreak;\n\n                    \t\tcase 'literal':\n                    \t\t\tif (root[i][j]['lang']) {\n                    \t\t\t\t\/\/ string\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + root[i][j]['value'].replace(\/\"\/g, '\\\\\"') + '\"',\n\t\t\t\t\t\t\t\t\t\t\troot[i][j]['lang']\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t\n                    \t\t\t} else {\n                    \t\t\t\t\/\/ other datatype, e.g. integer\n\t\t\t\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t\t\t'\"' + String(root[i][j]['value']).replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);                    \t\t                    \t\t\t\n                    \t\t\t}\n                    \t\t\tbreak;\n                    \t\n                    \t\tdefault:\n                    \t\t\tbreak;\n                    \t}\n                    }                    \n                    \n\t\t\t\t\t\/\/ object\n\t\t\t\t\tif (root[i][j]['@id'] || root[i][j]['@type']) {\n\n\t\t\t\t\t\tvar id = '';\n\t\t\t\t\t\tif (root[i][j]['@id']) {\n\t\t\t\t\t\t\tid = root[i][j]['@id'];\n\n\t\t\t\t\t\t\t\/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n\t\t\t\t\t\t\tif (id.match(\/_:b\\d+\/)) {\n\t\t\t\t\t\t\t\tid = '';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id == '') {\n\t\t\t\t\t\t\tid = subject + '#' + bnode();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttriples.push(\n\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsubtree(context, root[i][j], id);\n\t\t\t\t\t}\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal                    \n                    switch (i) {\n                    \n                    \tcase '@type':\n                    \t\ttriples.push(\n                    \t\t\ttriple(subject, \n                    \t\t\t'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', \n                    \t\t\tproperty_to_uri(context, root[i][j]))\n                    \t\t);\n                    \t\tbreak;\n                    \n                    \tdefault:\n                    \t    triples.push(\n\t\t\t\t\t\t\t\ttriple(\n\t\t\t\t\t\t\t\t\tsubject,\n\t\t\t\t\t\t\t\t\tproperty_to_uri(context, i),\n\t\t\t\t\t\t\t\t\t'\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t); \n                    \t\tbreak;                   \n                    }\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n  \tbnode_count = 0;\n  \t\n\tvar done = false;\n\t\n\t\/\/ Multiple graphs\n\tif (!done) {\n\t    if (doc.message['@graph']) {\n\t        for (var i in doc.message['@graph']) {\n \t           subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n   \t     \t}\n   \t \t\tdone = true;\n   \t \t}\n    }\n    \n    \/\/ Default graph with @id\n\tif (!done) {\n    \tif (doc.message['@id']) {\n\t        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n\t        done = true;\n\t    }\n\t    \n    }\n\n\t\/\/ DBPedia-style JSON-LD\n\tif (!done) {\n\t\tfor (var i in doc.message) {\n\t\t   subtree(null, doc.message[i], i);\n\t\t}\n\t    done = true;\n    }\n  \t\n    \n    var index_type = 'sop';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction message(doc) {\n\n\tvar use_roles = true;\n\tvar use_citations = true;\n\n\tvar jsonld = {};\n\n\t\/\/ context\n\tjsonld['@context'] = 'http:\/\/schema.org\/';\n\n\tvar container = null;\n\n\t\/\/ identifier\n\tif (doc.message.DOI) {\n\t\tjsonld['@id'] = 'https:\/\/doi.org\/' + doc.message.DOI.toLowerCase();\n\t}\n\n\tfor (var i in doc.message) {\n\n\t\tswitch (i) {\n\n\t\t\tcase 'type':\n\t\t\t\tswitch (doc.message[i]) {\n\t\t\t\t\tcase 'article-journal':\n\t\t\t\t\tcase 'journal-article':\n\t\t\t\t\t\tjsonld['@type'] = 'ScholarlyArticle';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 'DOI':\n\t\t\t\tvar identifier = {};\n\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\tidentifier.value = doc.message[i].toLowerCase();\n\t\t\t\t\n\t\t\t\tif (!jsonld.identifier) {\n\t\t\t\t\tjsonld.identifier = [];\n\t\t\t\t}\n\t\t\t\tjsonld.identifier.push(identifier);\n\t\t\t\tbreak;\t\n\n\t\t\tcase 'volume':\n\t\t\t\tjsonld.volumeNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'issue':\n\t\t\t\tjsonld.issueNumber = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'URL':\n\t\t\t\tjsonld.url = doc.message[i];\n\t\t\t\tbreak;\n\n\t\t\tcase 'page':\n\t\t\tcase 'pages':\n\t\t\t\tvar parts = doc.message[i].match(\/^(.*)\\-(.*)$\/);\n\t\t\t\tif (parts) {\n\t\t\t\t\tjsonld.pageStart = parts[1];\n\t\t\t\t\tjsonld.pageEnd = parts[2];\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.pagination = doc.message[i];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'issued':\n\t\t\t\tvar date = '';\n\t\t\t\tvar dateparts = doc.message[i]['date-parts'][0];\n\n\t\t\t\tswitch (dateparts.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tdate = dateparts[0];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-00';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tdate = dateparts[0] + '-' + (\"00\" + dateparts[1]).slice(-2) + '-' + (\"00\" + dateparts[2]).slice(-2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tjsonld.datePublished = date.toString();\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ tags\n\t\t\tcase 'subject':\n\t\t\t\tjsonld.keywords = [];\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tjsonld.keywords.push(doc.message[i][j]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'ISSN':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\tif (!container.issn) {\n\t\t\t\t\tcontainer.issn = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var j in doc.message[i]) {\n\t\t\t\t\tcontainer.issn.push(doc.message[i][j]);\n\t\t\t\t}\n\n\t\t\t\tcontainer['@id'] = 'http:\/\/worldcat.org\/issn\/' + container.issn[0];\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ journal\t\t\t\n\t\t\tcase 'container-title':\n\t\t\t\tif (!container) {\n\t\t\t\t\tcontainer = {};\n\t\t\t\t\tcontainer['@type'] = 'Periodical';\n\t\t\t\t}\n\n\t\t\t\t\/\/ journal name can be string or array\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tcontainer.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tcontainer.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontainer.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ string\n\t\t\t\t\tcontainer.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/\/ title can be string or array\n\t\t\tcase 'title':\n\t\t\t\tif (Array.isArray(doc.message[i])) {\n\n\t\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\tjsonld.name = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var j in doc.message[i]) {\n\n\t\t\t\t\t\tvar lang = detect_language(doc.message[i][j]);\n\n\t\t\t\t\t\tif (lang) {\n\t\t\t\t\t\t\tvar s = {};\n\t\t\t\t\t\t\ts['@lang'] = lang;\n\t\t\t\t\t\t\ts['@value'] = doc.message[i][j];\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(s);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\t\t\tjsonld.name.push(doc.message[i][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjsonld.name = doc.message[i][j];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tjsonld.name = doc.message[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\n\t\t\tcase 'author':\n\t\t\t\tvar n = doc.message[i].length;\n\n\t\t\t\tjsonld.creator = [];\n\n\t\t\t\tfor (var j = 0; j < n; j++) {\n\t\t\t\t\tvar author_id = '';\n\n\t\t\t\t\t\/\/ use ORCID if available, otherwise hash\n\t\t\t\t\tif (doc.message[i][j].ORCID) {\n\t\t\t\t\t\tauthor_id = doc.message[i][j].ORCID;\n\t\t\t\t\t\tauthor_id = author_id.replace(\/http:\/, 'https:');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t\/\/ #hash identifier \n\t\t\t\t\t\tauthor_id = jsonld['@id'] + '#author_' + (j + 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar creator = {};\n\t\t\t\t\tcreator['@id'] = author_id;\n\t\t\t\t\tcreator['@type'] = 'Person';\n\n\t\t\t\t\t\/\/ name\n\t\t\t\t\tvar name = '';\n\t\t\t\t\tif (doc.message[i][j].given) {\n\t\t\t\t\t\tcreator.givenName = doc.message[i][j].given;\n\t\t\t\t\t\tname += doc.message[i][j].given;\n\t\t\t\t\t}\n\t\t\t\t\tif (doc.message[i][j].family) {\n\t\t\t\t\t\tcreator.familyName = doc.message[i][j].family;\n\t\t\t\t\t\tname += ' ' + doc.message[i][j].family;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (name != '') {\n\t\t\t\t\t\tcreator.name = name;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (use_roles) {\n\t\t\t\t\t\tvar role_id = jsonld['@id'] + '#role' + (j + 1);\n\t\t\t\t\t\tvar role = {};\n\t\t\t\t\t\trole['@id'] = role_id;\n\t\t\t\t\t\trole['@type'] = 'Role';\n\n\t\t\t\t\t\trole.roleName = String(j + 1);\n\n\t\t\t\t\t\trole.creator = creator;\n\n\t\t\t\t\t\tjsonld.creator.push(role);\n\n\t\t\t\t  } else {\n\t\t\t\t\t\tjsonld.creator.push(creator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t\t\/*\n\t\t\t\t\t  \"reference\": [\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\t   \"key\": \"11192_B1\",\n\t\t\t\t\t\t\t   \"first-page\": \"119\",\n\t\t\t\t\t\t\t   \"article-title\": \"Pseudocrangonyx, a new genus of subterranean amphipods from Japan.\",\n\t\t\t\t\t\t\t   \"volume\": \"10\",\n\t\t\t\t\t\t\t   \"author\": \"Akatsuka\",\n\t\t\t\t\t\t\t   \"year\": \"1922\",\n\t\t\t\t\t\t\t   \"journal-title\": \"Annotationes Zoologicae Japonenses\"\n\t\t\t\t\t\t   },\n\t\t\t\t *\/\n\t\t\tcase 'reference':\n\t\t\t\tif (use_citations) {\n\t\t\t\t\tjsonld.citation = [];\n\t\t\t\t\tvar n = doc.message[i].length;\n\t\t\t\t\tfor (var j = 0; j < n; j++) {\n\n\t\t\t\t\t   var reference_id = '';\n\n\t\t\t\t\t   var reference = {};\n\n\t\t\t\t\t   if (doc.message[i][j].DOI) {\n\n\t\t\t\t\t\t\t\/\/ DOI is id for citation\n\t\t\t\t\t\t\treference_id = \"https:\/\/doi.org\/\" + doc.message[i][j].DOI.toLowerCase();\n\n\t\t\t\t\t\t\t\/\/ DOI cleaning (sigh)\n\t\t\t\t\t\t\t\/* Sometimes publishes make a mess of this, e.g. \n\t\t\t\t\t\t\thttp:\/\/dx.doi.org\/10.1111\/j.1096-0031.2007.00176.x\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t  key: \"b129_103\",\n\t\t\t\t\t\t\t  DOI: \"10.1636\/H05-14 SC.1\",\n\t\t\t\t\t\t\t  doi-asserted-by: \"publisher\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*\/\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/sc.1?\/g, '');\n\t\t\t\t\t\t\treference_id = reference_id.replace(\/\\s\/g, '');\n\n\t\t\t\t\t\t\t\/\/ Add DOI as identifier (to do)\n\t\t\t\t\t\t\tvar identifier = {};\n\t\t\t\t\t\t\tidentifier['@type'] = 'PropertyValue';\n\t\t\t\t\t\t\tidentifier.propertyID = 'doi';\n\t\t\t\t\t\t\tidentifier.value = doc.message[i][j].DOI.toLowerCase();\n\t\t\t\t\n\t\t\t\t\t\t\tif (!reference.identifier) {\n\t\t\t\t\t\t\t\treference.identifier = [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treference.identifier.push(identifier);\t\t\t\t\t\t\t\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\/\/ No (known) DOI for cited work\n\n\t\t\t\t\t\t\t\/\/ identifier for cited reference\n\t\t\t\t\t\t\tvar key = doc.message[i][j].key;\n\n\t\t\t\t\t\t\tkey = key.replace(\/\\t\/g, '');\n\t\t\t\t\t\t\tkey = key.replace(\/\\n\/g, '');\n\n\t\t\t\t\t\t\t\/\/ replace characters not allowed\n\t\t\t\t\t\t\tkey = key.replace(\/\\|\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\\/\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\.\/g, '-');\n\t\t\t\t\t\t\tkey = key.replace(\/\\s\/g, '-');\n\n\t\t\t\t\t\t\treference_id = jsonld['@id'] + \"\/reference\" + \"#\" + key;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treference['@id'] = reference_id;\n\t\t\t\t\t\treference['@type'] = 'CreativeWork';\n\n\t\t\t\t\t\tvar reference_container = null;\n\n\t\t\t\t\t\t\/\/ add semi-structured data if we have it\n\t\t\t\t\t\tfor (var k in doc.message[i][j]) {\n\t\t\t\t\t\t\tswitch (k) {\n\t\t\t\t\t\t\t\tcase 'article-title':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'author':\n\t\t\t\t\t\t\t\t\treference.creator = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'first-page':\n\t\t\t\t\t\t\t\t\treference.pageStart = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'ISSN':\n\t\t\t\t\t\t\t\t\tvar issn = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tissn = issn.replace('http:\/\/id.crossref.org\/issn\/', '');\n\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (!reference_container.issn) {\n\t\t\t\t\t\t\t\t\t\treference_container.issn = [];\n\t\t\t\t\t\t\t\t\t\treference_container['@id'] = 'http:\/\/worldcat.org\/issn\/' + issn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treference_container.issn.push(issn);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'issue':\n\t\t\t\t\t\t\t\t\treference.issueNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\/\/ Journal\n\t\t\t\t\t\t\t\tcase 'journal-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'Periodical';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\/\/ Book\n\t\t\t\t\t\t\t\tcase 'volume-title':\n\t\t\t\t\t\t\t\t\tif (!reference_container) {\n\t\t\t\t\t\t\t\t\t\treference_container = {};\n\t\t\t\t\t\t\t\t\t\treference_container['@type'] = 'CreativeWork';\n\t\t\t\t\t\t\t\t\t\treference_container.name = doc.message[i][j][k];\n\n\t\t\t\t\t\t\t\t\t\tif (!reference_container['@id']) {\n\t\t\t\t\t\t\t\t\t\t\treference_container['@id'] = reference['@id'] + '_container';\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'unstructured':\n\t\t\t\t\t\t\t\t\treference.name = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'volume':\n\t\t\t\t\t\t\t\t\treference.volumeNumber = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 'year':\n\t\t\t\t\t\t\t\t\treference.datePublished = doc.message[i][j][k];\n\t\t\t\t\t\t\t\t\treference.datePublished = reference.datePublished.replace(\/[a-z]$\/, '');\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (reference_container) {\n\t\t\t\t\t\t\treference.isPartOf = reference_container;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjsonld.citation.push(reference);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (container) {\n\t\tjsonld.isPartOf = container;\n\t}\n\n\n  return jsonld;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    \t\n    \t\/\/ CrossRef CSL    \t\n \t    if (doc['message-format'] == 'application\/vnd.crossref-api-message+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n   \t\n    \t\/\/ CSL-JSON\n\t    if (doc['message-format'] == 'application\/vnd.citationstyles.csl+json') {\n\t    \t\/\/ convert CSL-JSON to JSON-LD, then process\n\t        var d = {};\n\t        d.message = message(doc);\n\t        \n\t       ldjson(d);\n\t     }\n\t         \t\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        }
    },
    "language": "javascript"
}