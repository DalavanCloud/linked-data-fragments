{
    "_id": "_design\/triples",
    "_rev": "49-1f3e2642b7da5adc2728391aa7217e53",
    "views": {
        "spo": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    var m = property.match(\/([a-z]+):([a-z]+)\/i);\n    if (m) {\n        if (context[m[1]]) {\n            uri = context[m[1]] + m[2];\n        }\n    } else {\n        if (context['@vocab']) {\n            uri = context['@vocab'] + property;\n        } else {\n            if (typeof context === 'string') {\n                uri = context + property;\n            }\n        }\n    }\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n                        \/\/ literal with language code\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    } else {\n                        \/\/ object\n                        if (root[i][j]['@id'] || root[i][j]['@type']) {\n\n                            var id = '';\n                            if (root[i][j]['@id']) {\n                                id = root[i][j]['@id'];\n\n                                \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                                if (id.match(\/_:b\\d+\/)) {\n                                    id = '';\n                                }\n\n                            }\n                            if (id == '') {\n                                id = subject + '#' + bnode();\n                            }\n\n                            triples.push(\n                                triple(\n                                    subject,\n                                    property_to_uri(context, i),\n                                    id\n                                )\n                            );\n\n                            subtree(context, root[i][j], id);\n                        }\n                    }\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n    if (doc.message['@graph']) {\n        for (var i in doc.message['@graph']) {\n            subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n        }\n    } else {\n        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n    }\n    \n    var index_type = 'spo';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "pso": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    var m = property.match(\/([a-z]+):([a-z]+)\/i);\n    if (m) {\n        if (context[m[1]]) {\n            uri = context[m[1]] + m[2];\n        }\n    } else {\n        if (context['@vocab']) {\n            uri = context['@vocab'] + property;\n        } else {\n            if (typeof context === 'string') {\n                uri = context + property;\n            }\n        }\n    }\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n                        \/\/ literal with language code\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    } else {\n                        \/\/ object\n                        if (root[i][j]['@id'] || root[i][j]['@type']) {\n\n                            var id = '';\n                            if (root[i][j]['@id']) {\n                                id = root[i][j]['@id'];\n\n                                \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                                if (id.match(\/_:b\\d+\/)) {\n                                    id = '';\n                                }\n\n                            }\n                            if (id == '') {\n                                id = subject + '#' + bnode();\n                            }\n\n                            triples.push(\n                                triple(\n                                    subject,\n                                    property_to_uri(context, i),\n                                    id\n                                )\n                            );\n\n                            subtree(context, root[i][j], id);\n                        }\n                    }\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n    if (doc.message['@graph']) {\n        for (var i in doc.message['@graph']) {\n            subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n        }\n    } else {\n        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n    }\n    \n    var index_type = 'pso';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "pos": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    var m = property.match(\/([a-z]+):([a-z]+)\/i);\n    if (m) {\n        if (context[m[1]]) {\n            uri = context[m[1]] + m[2];\n        }\n    } else {\n        if (context['@vocab']) {\n            uri = context['@vocab'] + property;\n        } else {\n            if (typeof context === 'string') {\n                uri = context + property;\n            }\n        }\n    }\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n                        \/\/ literal with language code\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    } else {\n                        \/\/ object\n                        if (root[i][j]['@id'] || root[i][j]['@type']) {\n\n                            var id = '';\n                            if (root[i][j]['@id']) {\n                                id = root[i][j]['@id'];\n\n                                \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                                if (id.match(\/_:b\\d+\/)) {\n                                    id = '';\n                                }\n\n                            }\n                            if (id == '') {\n                                id = subject + '#' + bnode();\n                            }\n\n                            triples.push(\n                                triple(\n                                    subject,\n                                    property_to_uri(context, i),\n                                    id\n                                )\n                            );\n\n                            subtree(context, root[i][j], id);\n                        }\n                    }\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n    if (doc.message['@graph']) {\n        for (var i in doc.message['@graph']) {\n            subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n        }\n    } else {\n        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n    }\n    \n    var index_type = 'pos';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "osp": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    var m = property.match(\/([a-z]+):([a-z]+)\/i);\n    if (m) {\n        if (context[m[1]]) {\n            uri = context[m[1]] + m[2];\n        }\n    } else {\n        if (context['@vocab']) {\n            uri = context['@vocab'] + property;\n        } else {\n            if (typeof context === 'string') {\n                uri = context + property;\n            }\n        }\n    }\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n                        \/\/ literal with language code\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    } else {\n                        \/\/ object\n                        if (root[i][j]['@id'] || root[i][j]['@type']) {\n\n                            var id = '';\n                            if (root[i][j]['@id']) {\n                                id = root[i][j]['@id'];\n\n                                \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                                if (id.match(\/_:b\\d+\/)) {\n                                    id = '';\n                                }\n\n                            }\n                            if (id == '') {\n                                id = subject + '#' + bnode();\n                            }\n\n                            triples.push(\n                                triple(\n                                    subject,\n                                    property_to_uri(context, i),\n                                    id\n                                )\n                            );\n\n                            subtree(context, root[i][j], id);\n                        }\n                    }\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n    if (doc.message['@graph']) {\n        for (var i in doc.message['@graph']) {\n            subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n        }\n    } else {\n        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n    }\n    \n    var index_type = 'osp';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "ops": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    var m = property.match(\/([a-z]+):([a-z]+)\/i);\n    if (m) {\n        if (context[m[1]]) {\n            uri = context[m[1]] + m[2];\n        }\n    } else {\n        if (context['@vocab']) {\n            uri = context['@vocab'] + property;\n        } else {\n            if (typeof context === 'string') {\n                uri = context + property;\n            }\n        }\n    }\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n                        \/\/ literal with language code\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    } else {\n                        \/\/ object\n                        if (root[i][j]['@id'] || root[i][j]['@type']) {\n\n                            var id = '';\n                            if (root[i][j]['@id']) {\n                                id = root[i][j]['@id'];\n\n                                \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                                if (id.match(\/_:b\\d+\/)) {\n                                    id = '';\n                                }\n\n                            }\n                            if (id == '') {\n                                id = subject + '#' + bnode();\n                            }\n\n                            triples.push(\n                                triple(\n                                    subject,\n                                    property_to_uri(context, i),\n                                    id\n                                )\n                            );\n\n                            subtree(context, root[i][j], id);\n                        }\n                    }\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n    if (doc.message['@graph']) {\n        for (var i in doc.message['@graph']) {\n            subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n        }\n    } else {\n        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n    }\n    \n    var index_type = 'ops';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        },
        "sop": {
            "map": "\/\/ START COUCHDB VIEW\nvar triples = [];\n\nvar bnode_count = 0;\n\n\/\/----------------------------------------------------------------------------------------\nfunction bnode() {\n\tbnode_count++;\n\t\n\treturn 'b' + bnode_count;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/25715455\nfunction isObject(item) {\n    return (typeof item === \"object\" && !Array.isArray(item) && item !== null);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ http:\/\/stackoverflow.com\/a\/21445415\nfunction uniques(arr) {\n    var a = [];\n    for (var i = 0, l = arr.length; i < l; i++)\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ Store a triple with optional language code\nfunction triple(subject, predicate, object, language) {\n    var triple = [];\n    triple[0] = subject;\n    triple[1] = predicate;\n\n    \/\/ Object may be URI or literal\n    if (object.match(\/^(http|urn|_:)\/)) {\n        triple[2] = object;\n    } else {\n        var literal = object;\n        if (typeof language === 'undefined') {} else {\n            literal += '@' + language;\n        }\n        triple[2] = literal;\n    }\n\n    return triple;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction property_to_uri(context, property) {\n    var uri = property;\n    var m = property.match(\/([a-z]+):([a-z]+)\/i);\n    if (m) {\n        if (context[m[1]]) {\n            uri = context[m[1]] + m[2];\n        }\n    } else {\n        if (context['@vocab']) {\n            uri = context['@vocab'] + property;\n        } else {\n            if (typeof context === 'string') {\n                uri = context + property;\n            }\n        }\n    }\n\n    return uri;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction subtree(context, root, subject) {\n\n    for (var i in root) {\n\n        \/\/console.log(i);\n\n        \/\/ Simple literal\n        if (typeof root[i] === 'string') {\n            switch (i) {\n                case '@context':\n                case '@id':\n                    break;\n\n                case '@type':\n                    triples.push(triple(subject, 'http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type', property_to_uri(context, root[i])));\n                    break;\n\n                default:\n                    \/\/ simple literal\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                    break;\n            }\n        }\n\n        if (isObject(root[i])) {\n            if (root[i]['@value'] && root[i]['@language']) {\n                \/\/ literal with language code\n\n                triples.push(\n                    triple(\n                        subject,\n                        property_to_uri(context, i),\n                        '\"' + root[i]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                        root[i]['@language']\n                    )\n                );\n\n            } else {\n                \/\/ object\n                if (root[i]['@id'] || root[i]['@type']) {\n\n                    var id = '';\n                    if (root[i]['@id']) {\n                        id = root[i]['@id'];\n\n                        \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                        if (id.match(\/_:b\\d+\/)) {\n                            id = '';\n                        }\n\n                    }\n                    if (id == '') {\n                        id = subject + '#' + bnode();\n                    }\n\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            id\n                        )\n                    );\n\n                    subtree(context, root[i], id);\n                }\n            }\n        }\n\n\n        if (Array.isArray(root[i])) {\n            for (var j in root[i]) {\n                if (isObject(root[i][j])) {\n\n                    if (root[i][j]['@value'] && root[i][j]['@language']) {\n                        \/\/ literal with language code\n\n                        triples.push(\n                            triple(\n                                subject,\n                                property_to_uri(context, i),\n                                '\"' + root[i][j]['@value'].replace(\/\"\/g, '\\\\\"') + '\"',\n                                root[i][j]['@language']\n                            )\n                        );\n\n                    } else {\n                        \/\/ object\n                        if (root[i][j]['@id'] || root[i][j]['@type']) {\n\n                            var id = '';\n                            if (root[i][j]['@id']) {\n                                id = root[i][j]['@id'];\n\n                                \/\/ PHP JSON-LD framed creates bnodes _:b\\d+\n                                if (id.match(\/_:b\\d+\/)) {\n                                    id = '';\n                                }\n\n                            }\n                            if (id == '') {\n                                id = subject + '#' + bnode();\n                            }\n\n                            triples.push(\n                                triple(\n                                    subject,\n                                    property_to_uri(context, i),\n                                    id\n                                )\n                            );\n\n                            subtree(context, root[i][j], id);\n                        }\n                    }\n\n                }\n\n                if (typeof root[i][j] === 'string') {\n                    \/\/ simple literal\t\t\t\t\t\n                    triples.push(\n                        triple(\n                            subject,\n                            property_to_uri(context, i),\n                            '\"' + root[i][j].replace(\/\"\/g, '\\\\\"') + '\"'\n                        )\n                    );\n                }\n\n            }\n        }\n\n\n    }\n\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfunction ldjson(doc) {\n  \ttriples=[];\n    if (doc.message['@graph']) {\n        for (var i in doc.message['@graph']) {\n            subtree(doc.message['@context'], doc.message['@graph'][i], doc.message['@graph'][i]['@id']);\n        }\n    } else {\n        subtree(doc.message['@context'], doc.message, doc.message['@id']);\n    }\n    \n    var index_type = 'sop';\n \n    for (var i in triples) {\n      switch (index_type) {\n      \n        case 'osp':\n          emit([triples[i][2], triples[i][0], triples[i][1]], 1);\n          break;\n\n        case 'ops':\n          emit([triples[i][2], triples[i][1], triples[i][0]], 1);\n          break;\n      \n        case 'pso':\n          emit([triples[i][1], triples[i][0], triples[i][2]], 1);\n          break;\n          \n        case 'pos':\n          emit([triples[i][1], triples[i][2], triples[i][0]], 1);\n          break;\n          \n        case 'sop':\n          emit([triples[i][0], triples[i][2], triples[i][1]], 1);\n          break;\n          \n        case 'spo':\n        default:\n          emit(triples[i], 1);\n          break;\n      }\n    }\n}\n\n\/\/----------------------------------------------------------------------------------------\nfunction (doc) {\n\tif (doc['message-format']) {\n\n    \t\/\/ JSON-LD\n    \tif (doc['message-format'] === 'application\/ld+json') {\n      \t\tldjson(doc);\n    \t}\n    }\n}\t\n\n\n\/\/ END COUCHDB VIEW\t",
            "reduce": "_sum"
        }
    },
    "language": "javascript"
}